/* ========================================================================
 * Copyright 2014 Arquidalgos
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 Arquidalgos

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 * ========================================================================


 Source generated by CrudMaker version 1.0.0.201408112050

 */
package co.edu.uniandes.csw.Arquidalgos.usuario.persistence;

import co.edu.uniandes.csw.Arquidalgos.bono.logic.dto.BonoDTO;
import co.edu.uniandes.csw.Arquidalgos.bono.persistence.converter.BonoConverter;
import co.edu.uniandes.csw.Arquidalgos.bono.persistence.entity.BonoEntity;
import co.edu.uniandes.csw.Arquidalgos.preferencia.persistence.entity.PreferenciaEntity;
import co.edu.uniandes.csw.Arquidalgos.tienda.logic.dto.TiendaDTO;
import co.edu.uniandes.csw.Arquidalgos.tienda.persistence.TiendaPersistence;
import co.edu.uniandes.csw.Arquidalgos.tienda.persistence.converter.TiendaConverter;
import co.edu.uniandes.csw.Arquidalgos.tienda.persistence.entity.TiendaEntity;
import co.edu.uniandes.csw.Arquidalgos.usuario.logic.dto.UsuarioDTO;
import co.edu.uniandes.csw.Arquidalgos.usuario.logic.ejb.SendEmail;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.api.IUsuarioPersistence;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.converter.UsuarioConverter;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.entity.UsuarioAmigoEntity;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.entity.UsuarioBonoTUEntity;
import co.edu.uniandes.csw.Arquidalgos.usuario.persistence.entity.UsuarioEntity;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.enterprise.inject.Default;
import javax.persistence.Query;

@Default
@Stateless
@LocalBean
public class UsuarioPersistence extends _UsuarioPersistence implements IUsuarioPersistence {

    public List<UsuarioDTO> darAmigosUsuario(String facebookId) {
        System.out.println("Dar amigos persistence de: " + facebookId);
        List<UsuarioDTO> resp = new ArrayList<UsuarioDTO>();

        Query q = entityManager.createQuery("select u from UsuarioAmigoEntity u");

        List<UsuarioAmigoEntity> amigos = q.getResultList();

        for (int i = 0; i < amigos.size(); i++) {
            UsuarioAmigoEntity actual = (UsuarioAmigoEntity) amigos.get(i);
            if (actual.getUsuarioFacebookId().equals(facebookId)) {
                UsuarioDTO amigo = getUsuarioFacebookId(actual.getAmigoFacebookId());
                if (amigo != null) {
                    System.out.println("Dar amigos");
                    System.out.println("Amigo:");
                    System.out.println("FB id:");
                    System.out.println(amigo.getFacebookId());
                    System.out.println("Amigo agregado: " + amigo.getFacebookId() + " - " + amigo.getName());
                    resp.add(amigo);
                }
            }
        }

        return resp;
    }

    public List<UsuarioDTO> darAmigosUsuarioGoogle(String facebookId) {
        System.out.println("Dar amigos persistence de: " + facebookId);
        List<UsuarioDTO> resp = new ArrayList<UsuarioDTO>();

        Query q = entityManager.createQuery("select u from UsuarioAmigoEntity u");

        List<UsuarioAmigoEntity> amigos = q.getResultList();

        for (int i = 0; i < amigos.size(); i++) {
            UsuarioAmigoEntity actual = (UsuarioAmigoEntity) amigos.get(i);
            if (actual.getUsuarioFacebookId().equals(facebookId)) {
                UsuarioDTO amigo = getUsuarioGoogleId(actual.getAmigoFacebookId());
                if (amigo != null) {
                    resp.add(amigo);
                    System.out.println("Amigo: " + amigo);
                    System.out.println("Amigo: " + actual);
                }
            }
        }

        return resp;
    }

    public UsuarioDTO getUsuarioFacebookId(String facebookId) {

        List<UsuarioDTO> usuarios = getUsuarios();
        System.out.println("FB id:");
        System.out.println(facebookId);
        for (UsuarioDTO usuario : usuarios) {
            System.out.println("Usuario");
            System.out.println(usuario);
            System.out.println("Usuario get id fb");
            System.out.println(usuario.getFacebookId());
            System.out.println();
            System.out.println();
            if (usuario.getFacebookId() != null) {
                if (usuario.getFacebookId().equals(facebookId)) {
                    return usuario;
                }
            }
        }
        return null;
    }

    public UsuarioDTO getUsuarioGoogleId(String gId) {

        List<UsuarioDTO> usuarios = getUsuarios();

        for (UsuarioDTO usuario : usuarios) {
            System.out.println("Usuario");
            System.out.println(usuario);
            System.out.println("Usuario get id");
            System.out.println(usuario.getGoogleId());
            System.out.println("gId: ");
            System.out.println(gId);
            System.out.println();
            if (usuario.getGoogleId() != null) {
                if (usuario.getGoogleId().equals(gId)) {
                    return usuario;
                }
            }
        }
        return null;
    }

    public List<UsuarioDTO> agregarAmigos(String facebookId, List<UsuarioDTO> amigos) {

        for (int i = 0; i < amigos.size(); i++) {
            UsuarioAmigoEntity union = new UsuarioAmigoEntity();

            UsuarioDTO amigoActual = amigos.get(i);

            if (amigos.get(i).getFacebookId().equals("10152697649964929")) {

                amigos.get(i).setEmail("molano_francisco@hotmail.com");
            }
            if (amigos.get(i).getFacebookId().equals("10152422965938108")) {

                amigos.get(i).setEmail("ln.rojas1902@uniandes.edu.co");
            }
            if (amigos.get(i).getFacebookId().equals("639083569524127")) {

                amigos.get(i).setEmail("jose_suarez94@hotmail.com");
            }
            if (amigos.get(i).getFacebookId().equals("579260092185903")) {

                amigos.get(i).setEmail("vilcansoto18@hotmail.com");
            }
            if (amigos.get(i).getFacebookId().equals("1481578408760798")) {

                amigos.get(i).setEmail("arquidalgos@hotmail.com");
            }

            if (getUsuarioFacebookId(amigoActual.getFacebookId()) == null) {

//                UsuarioEntity entity=UsuarioConverter.persistenceDTO2Entity(amigoActual);
//		entityManager.persist(entity);     
                createUsuario(amigoActual);

            }
            boolean hayRelacion = false;
            List<UsuarioDTO> amigosExistentes = darAmigosUsuario(facebookId);
            for (int j = 0; j < amigosExistentes.size() && !hayRelacion; j++) {
                if (amigosExistentes.get(j).getFacebookId().equals(amigoActual.getFacebookId())) {
                    hayRelacion = true;
                }
            }
            if (!hayRelacion) {
                union.setUsuarioFacebookId(facebookId);

                union.setAmigoFacebookId(amigoActual.getFacebookId());

                entityManager.persist(union);

            }

        }

        return darAmigosUsuario(facebookId);
    }

    public List<UsuarioDTO> agregarAmigosGoogle(String googleId, List<UsuarioDTO> amigos) {
        System.out.println("Se mete a agregar amigos google");
        System.out.println("Id google:");
        System.out.println(googleId);
        System.out.println("Lista:");
        System.out.println(amigos);
        for (int i = 0; i < amigos.size(); i++) {
            UsuarioAmigoEntity union = new UsuarioAmigoEntity();

            UsuarioDTO amigoActual = amigos.get(i);

            if (amigos.get(i).getGoogleId().equals("10152697649964929")) {

                amigos.get(i).setEmail("molano_francisco@hotmail.com");
            }
            if (amigos.get(i).getGoogleId().equals("10152422965938108")) {

                amigos.get(i).setEmail("ln.rojas1902@uniandes.edu.co");
            }
            if (amigos.get(i).getGoogleId().equals("639083569524127")) {

                amigos.get(i).setEmail("jose_suarez94@hotmail.com");
            }
            if (amigos.get(i).getGoogleId().equals("579260092185903")) {

                amigos.get(i).setEmail("vilcansoto18@hotmail.com");
            }
            if (amigos.get(i).getGoogleId().equals("1481578408760798")) {

                amigos.get(i).setEmail("arquidalgos@hotmail.com");
            }

            if (getUsuarioGoogleId(amigoActual.getGoogleId()) == null) {

//                UsuarioEntity entity=UsuarioConverter.persistenceDTO2Entity(amigoActual);
//		entityManager.persist(entity);     
                createUsuario(amigoActual);

            }
            boolean hayRelacion = false;
            List<UsuarioDTO> amigosExistentes = darAmigosUsuarioGoogle(googleId);
            for (int j = 0; j < amigosExistentes.size() && !hayRelacion; j++) {
                if (amigosExistentes.get(j).getGoogleId().equals(amigoActual.getGoogleId())) {
                    hayRelacion = true;
                }
            }
            if (!hayRelacion) {
                union.setUsuarioFacebookId(googleId);

                union.setAmigoFacebookId(amigoActual.getGoogleId());

                entityManager.persist(union);

            }

        }

        return darAmigosUsuarioGoogle(googleId);
    }

    public List<UsuarioDTO> agregarAmigosDGooAFb(String facebookId, List<UsuarioDTO> amigos) {
        System.out.println("Se mete a agregar amigos google");
        System.out.println("Id google:");
        System.out.println(facebookId);
        System.out.println("Lista:");
        System.out.println(amigos);
        for (int i = 0; i < amigos.size(); i++) {
            UsuarioAmigoEntity union = new UsuarioAmigoEntity();

            UsuarioDTO amigoActual = amigos.get(i);

            if (amigos.get(i).getGoogleId().equals("10152697649964929")) {

                amigos.get(i).setEmail("molano_francisco@hotmail.com");
            }
            if (amigos.get(i).getGoogleId().equals("10152422965938108")) {

                amigos.get(i).setEmail("ln.rojas1902@uniandes.edu.co");
            }
            if (amigos.get(i).getGoogleId().equals("639083569524127")) {

                amigos.get(i).setEmail("jose_suarez94@hotmail.com");
            }
            if (amigos.get(i).getGoogleId().equals("579260092185903")) {

                amigos.get(i).setEmail("vilcansoto18@hotmail.com");
            }
            if (amigos.get(i).getGoogleId().equals("1481578408760798")) {

                amigos.get(i).setEmail("arquidalgos@hotmail.com");
            }

            if (getUsuarioGoogleId(amigoActual.getGoogleId()) == null) {

//                UsuarioEntity entity=UsuarioConverter.persistenceDTO2Entity(amigoActual);
//		entityManager.persist(entity);     
                createUsuario(amigoActual);

            }
            boolean hayRelacion = false;
            List<UsuarioDTO> amigosExistentes = darAmigosUsuario(facebookId);
            for (int j = 0; j < amigosExistentes.size() && !hayRelacion; j++) {
                if (amigosExistentes.get(j).getGoogleId().equals(amigoActual.getGoogleId())) {
                    hayRelacion = true;
                }
            }
            if (!hayRelacion) {
                System.out.print("+ + + + + + + + + + + + + + + + + + + + + + + + + +Usuarios  unir+ + + + + + + + + + + + + + + + + + + + + + + + + +");
                System.out.print("+ + + + + + + + + + + + + + + + + + + + + + + + + +Usuarios  unir+ + + + + + + + + + + + + + + + + + + + + + + + + +");
                System.out.print("+ + + + + + + + + + + + + + + + + + + + + + + + + +Usuarios  unir+ + + + + + + + + + + + + + + + + + + + + + + + + +");
                System.out.print("+ + + + + + + + + + + + + + + + + + + + + + + + + +Usuarios  unir+ + + + + + + + + + + + + + + + + + + + + + + + + +");
                System.out.print("+ + + + + + + + + + + + + + + + + + + + + + + + + +Usuarios  unir+ + + + + + + + + + + + + + + + + + + + + + + + + +");
                union.setUsuarioFacebookId(facebookId);
                
                union.setAmigoFacebookId(amigoActual.getGoogleId());
                System.out.print("Union: "+union);
                entityManager.persist(union);

            }

        }

        return darAmigosUsuarioGoogle(facebookId);
    }

    public List<BonoDTO> agregarBonos(String facebookId, List<BonoDTO> bonos) {

        for (BonoDTO bono : bonos) {
            Query q = entityManager.createQuery("select u from TiendaEntity u where u.facebookId = '" + bono.getTiendafId() + "'");
            String nombreTienda = TiendaConverter.entity2PersistenceDTO((TiendaEntity) q.getSingleResult()).getName();
            System.out.println("Bono Nuevo: " + bono.getTiendafId() + "  " + bono.getUsuariobnId() + " valor: " + bono.getValor());
            UsuarioDTO usuario = getUsuarioFacebookId(facebookId);
            bono.setFecha(null);
            BonoEntity entity = BonoConverter.persistenceDTO2Entity(bono);
            entity.setFecha(new Date());
            entityManager.persist(entity);

            UsuarioBonoTUEntity union = new UsuarioBonoTUEntity();
            union.setIdBono(bono.getId());
            union.setIdUsuario(facebookId);
            entityManager.persist(union);
            new SendEmail(usuario.getEmail(), "" + bono.getValor(), nombreTienda, "" + entity.getId()).start();
        }
        return bonos;
    }

    public List<TiendaDTO> darLikesUsuario(String facebookId, List<TiendaDTO> tiendasN) {

        System.out.println("Usuario id " + facebookId);

        UsuarioDTO us = getUsuarioFacebookId(facebookId);
        List<TiendaDTO> resp = new ArrayList<TiendaDTO>();

        if (us != null) {
            List<TiendaDTO> tiendas = getTiendas();

            for (TiendaDTO tiendaActual : tiendasN) {

                System.out.println("Tienda actual: " + tiendaActual.getName() + " - id: " + tiendaActual.getFacebookId());
                boolean con = buscarTiendaID(tiendaActual.getFacebookId());
                System.out.println("Condicion if " + con);
                if (con) {

                    System.out.println("Entro al if preferencia: " + tiendaActual.getName());
                    PreferenciaEntity p = new PreferenciaEntity();

                    p.setMeGusta(true);
                    p.setTiendaFacebookId(tiendaActual.getFacebookId());
                    p.setUsuarioFacebookId(facebookId);

                    entityManager.persist(p);

                    resp.add(tiendaActual);
                }

            }

        }

        return resp;
    }

    public List<TiendaDTO> getTiendas() {
        Query q = entityManager.createQuery("select u from TiendaEntity u");
        return TiendaConverter.entity2PersistenceDTOList(q.getResultList());
    }

    public boolean buscarTiendaID(String id) {

        List<TiendaDTO> tiendas = getTiendas();

        for (TiendaDTO tienda : tiendas) {

            if (tienda.getFacebookId().equals(id)) {
                return true;
            }

        }
        return false;

    }

    public List<UsuarioDTO> unirUsuarios(UsuarioDTO usG, UsuarioDTO usFb) {
        List<UsuarioDTO> n = new ArrayList<UsuarioDTO>();
        System.out.println("Usuario google: " + usG);
        System.out.println("Usuario facebook: " + usFb);
        List<UsuarioDTO> amigosG = darAmigosUsuarioGoogle(usG.getGoogleId());
        List<UsuarioDTO> amigosFb = darAmigosUsuario(usFb.getFacebookId());
        System.out.println("Amigos google: " + amigosG);
        System.out.println("Amigos facebook: " + amigosFb);
        agregarAmigosDGooAFb(usFb.getFacebookId(), amigosG);
        agregarAmigos(usG.getGoogleId(), amigosFb);
        return n;
    }

}
